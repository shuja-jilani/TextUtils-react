{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","aria-checked","htmlFor","redMode","greenMode","purpleMode","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","arr","split","i","length","charAt","slice","join","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","navigator","clipboard","writeText","defaultProps","Alert","alert","word","lower","capitalise","App","setmode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8d599c6c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { useState } from 'react';\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// ` se template literal aur usme $ se javascript\r\n//props ka scene ye h ki jo main app.js h usse hum content bhejenge aur wahi phir yahan daal diya jaega\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n          <div\r\n            className={`mx-2 form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toggleMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              aria-checked\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Blue Dark Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`mx-2 form-check form-switch text-${props.mode === \"light\" ? \"danger\" : \"light\"\r\n              }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.redMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              aria-checked\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Red Dark Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`mx-2 form-check form-switch text-${props.mode === \"light\" ? \"success\" : \"light\"\r\n              }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.greenMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              aria-checked\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Green Dark Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`mx-2 form-check form-switch text-${props.mode === \"light\" ? \"purple\" : \"light\"\r\n              }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.purpleMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              aria-checked\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Purple Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n//bootstrap mein primary blue hota h , success green hota h aur danger red\r\nNavbar.propTypes = {\r\n  //proptypes ka kaam h prop ka datatype set krna\r\n  title: PropTypes.string.isRequired, //isrequired h agr aur nhi dala to error\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  //agar by chance props bheje hi nhi to\r\n  title: \"Set title here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"UpperCase was clicked\"+ text);\r\n        // setText(\"You have clicked on handleUpClick\"); //qki text useState me h aur setText usko update krne ka function h\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\");\r\n    }\r\n    const handlelowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\");\r\n\r\n    }\r\n    const handleclearClick = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared\", \"success\");\r\n\r\n    }\r\n    const handlefirstletClick = () => {\r\n        const arr = text.split(\" \");\r\n        for (let i = 0; i < arr.length; i++) {\r\n            arr[i]= arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n        }\r\n        const newText = arr.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Converted first letters to UpperCase\", \"success\");\r\n\r\n    }\r\n    \r\n    const handleSpeak = () =>{\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n        props.showAlert(\"Spoken\", \"success\");\r\n\r\n    }\r\n\r\n    const copyText =() =>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Changed\");\r\n        setText(event.target.value); //event h us textbox me type krna usko target krke uski value jo text h wo set hojaegi to hum text box me likh skte h ab\r\n    }\r\n    const [text,setText] = useState('');// hum chahte hn text area ki value ho wo text , aur usko badalne ke liye use hoga setText function\r\n    // text = \"new text\"; // wrong way to change the state \r\n    //correct way to change the state \r\n    // setText(\"new text\");\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n    <h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n<textarea className=\"form-control\" value = {text} onChange= {handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white',\r\ncolor: props.mode==='light'? 'black':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handlelowClick}>Convert to LowerCase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handlefirstletClick}>Convert first letter to UpperCase</button>\r\n<button type='submit' className=\"btn btn-primary mx-2\" onClick={handleSpeak}>Speak</button>\r\n<button type='submit' className=\"btn btn-primary mx-2\" onClick={copyText}>Copy</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleclearClick}>Clear text</button>\r\n</div>\r\n<div className=\"container my-3\"  style={{color: props.mode==='dark'?'white':'black'}}>\r\n    <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n    <p>{0.008* (text.split(\" \").length-1)} Minutes read </p>\r\n    <h2>Preview</h2>\r\n    <p>{text.length>0?text:\"Enter something in the textbox to preview here\"}</p>\r\n</div>\r\n\r\n</>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalise =(word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n      props.alert && <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalise(props.alert.type)}</strong> {props.alert.msg}\r\n        \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./Appa.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\n// app js me jo kuch likha hoga wo npm start krne ke baad humari site dikhaegi\n//JSX hota ye h ki hoti to html hi h bs js ka mukut pehna hota h, jsx humare function ke return ke () ke andr likhi jaati h\n//jsx me sb kuch html ki trh h bs for usme htmlFor likhte hn aur jo js ke reseerved keywords honge unhe bhi\n// return () ke brackets ke andr jo jsx h usme js likhne ke liye use {}\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\"); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type, //4 trah ke types hn bootstrap pr dekh le , success, warning, primary, danger\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#040261\";\n      showAlert(\"Dark mode has been enabled\", \"success\"); //message aur type\n      document.title = \"TextUtils-Dark Mode\";\n      // setInterval(()=>{\n      // document.title = \"TextUtils is Amazing\";\n      // },2000)\n      // setInterval(()=>{\n      // document.title = \"Install TextUtils Now\";\n      // },1500)\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n  };\n  const redMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#500d0d\";\n      showAlert(\"Dark red mode has been enabled\", \"success\"); //message aur type\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  const greenMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"green\";\n      showAlert(\"Dark green mode has been enabled\", \"success\"); //message aur type\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  const purpleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#75009a\";\n      showAlert(\"Dark purple mode has been enabled\", \"success\"); //message aur type\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\"/> */}\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          mode={mode}\n          toggleMode={toggleMode}\n          redMode={redMode}\n          greenMode={greenMode}\n          purpleMode={purpleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route path=\"/about\" element ={<About/>}> */}\n            {/* </Route> */}\n            {/* <Route path=\"/\" element ={ */}\n            <Textform\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n              />\n              {/* }> */}\n              \n            {/* </Route> */}\n          {/* </Routes> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n//strict mode hum jaante hn , to prevent bugs and errors, index.js humara entry point h , and html se root ko render krke humne usme app component dal diya h, ab app component jesa dikhega wesi hi humari website dikhegi \nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode> \n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}